{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red246\green246\blue246;\red246\green246\blue246;
\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c97255\c97255\c97255;\cssrgb\c97255\c97255\c97255;
\cssrgb\c100000\c100000\c100000\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\partightenfactor0

\f0\fs21\fsmilli10800 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 puzzles with 5-move optimal solutions\
-------------------------------------\
algorithm                num. solved    avg. moves    avg. states tested\
------------------------------------------------------------------------\
random				  10           6.2            298.3\
BFS                           10           5.0            47.1\
DFS (depth limit 20)          10          16.2            19072.7\
DFS (depth limit 50)          10          48.2            49043.0\
Greedy Search (using h1)      10           5.4            70.3\
A* (using h1)	  	        10           5.0            6.5\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb4 \outl0\strokewidth0 puzzles with 10-move optimal solutions\
-------------------------------------\
algorithm                num. solved    avg. moves    avg. states tested\
------------------------------------------------------------------------\
random				   9           11.56           2129.34\
BFS                           10           10.0            747.4\
DFS (depth limit 20)          10           18.8            24858.0\
DFS (depth limit 50)          10           49.2            92287.3\
Greedy Search (using h1)       8           76.0            325.625\
A* (using h1)	  	        10           10.0            27.3\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb4 puzzles with 15-move optimal solutions\
-------------------------------------\
algorithm                num. solved    avg. moves    avg. states tested\
------------------------------------------------------------------------\
random				  10           17.8            12714.7\
BFS                           10           15.0            12672.0\
DFS (depth limit 20)          10           17.8            68659.0\
DFS (depth limit 50)          10           48.6            111406.0\
Greedy Search (using h1)       6           90.34           2718.0\
A* (using h1)	  	        10           15.0            313.8\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb4 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97 \
Reflection: The most optimal solution is given by A*, it gives the lowest average moves and states tested. This is due to they way A* looks at the number of moves in terms of cost. This makes it easier for A* to find the lowest cost for each move and thus attains the lowest cost for each move.\
\
The random algorithm, on the other hand, is the least accurate. It does not have a set way of picking moves. BFS checks horizontally, thus it checks a large number of states before finding the optimal. But DFS takes longer since it checks each branch until the specified depth limit. Greedy is the second best algorithm, it looks at heuristic and priority method.\
\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 heuristic h2\
------------\
This heuristic function finds the number associated with the each row and column in the called state. It then checks if the row and column are the same with the row and column of the goal state for the specified number, if not it will add 1 for each different row and each different column. It will then check for all and return the sum.\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb4 \outl0\strokewidth0 \
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 puzzles with 18-move optimal solutions\
--------------------------------------\
algorithm              num. solved    avg. moves    avg. states tested\
----------------------------------------------------------------------\
Greedy (heuristic h1)      7           133.71		 4594.0\
Greedy (heuristic h2)      10		74.8			 254.4\
# Greedy with any other heuristics\
\
A* (heuristic h1)          10          18.0              1602.0\
A* (heuristic h2)          10          18.0              510.9\
# Greedy with any other heuristics\
\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb4 \outl0\strokewidth0 puzzles with 21-move optimal solutions\
--------------------------------------\
algorithm              num. solved    avg. moves    avg. states tested\
----------------------------------------------------------------------\
Greedy (heuristic h1)      5           104.6		       4172.6\
Greedy (heuristic h2)      10		83.4			  397.7\
# Greedy with any other heuristics\
\
A* (heuristic h1)          10          21.0              6301.7\
A* (heuristic h2)          10          21.0              1499.6\
# Greedy with any other heuristics\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb4 puzzles with 24-move optimal solutions\
--------------------------------------\
algorithm              num. solved    avg. moves    avg. states tested\
----------------------------------------------------------------------\
Greedy (heuristic h1)      6           123.67		  2856.17\
Greedy (heuristic h2)      10          114.0              400.4\
# Greedy with any other heuristics\
\
A* (heuristic h1)          6            24.0              24368.834\
A* (heuristic h2)          10           24.0              5303.0\
# Greedy with any other heuristics\cf2 \cb4 \
\
\
\
\cf2 \cb4 puzzles with 27-move optimal solutions\
--------------------------------------\
algorithm              num. solved    avg. moves    avg. states tested\
----------------------------------------------------------------------\
Greedy (heuristic h1)      4           197.5		       4285.5\
Greedy \cf2 \cb5 (heuristic h2)      10          117.0             402.5\
# Greedy with any other heuristics\
\
A* (heuristic h1)          0\
A* (heuristic h2)          6           27.0              25795.833\
# Greedy with any other heuristics\cf2 \cb5 \
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb5 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb5 \strokec2 Reflection h2:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \cb5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 As mentioned above, A* is a more informed search algorithm than Greedy, and often took less time for the tests to run. Our heuristic 2 function (h2) worked better than the h1 heuristic function because our h2 function assigned state estimations more specifically with the rows/column analysis. It is evident that our h2 ran better because as the number of moves to get to the optimal solution increased from 18 to 21 to 24 to 27, the A*h2 test or the Greedy h2 test was the most optimal and closest to the least average number of moves to get to the goal state as possible.\cf2 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl300\partightenfactor0
\cf2 \cb5 \strokec2 \
\
\cf2 \cb3 \strokec2 \
\
\
\
}